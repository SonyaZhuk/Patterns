package gof.designpatterns.structural.adapter.concept;

/**
 * запуск процесса адаптации
 *
 * Пусть существуют две системы, выполняющие сходные действия, но несовместимые по интерфейсу, которые, тем не менее,
 * необходимо заставить работать в одном приложении. Позволяет определить интерфейс-адаптер, доступный его пользователямклиентам,
 * в то же время способ реализации отделяет от клиентов и не известен им. Однако функциональность, предоставляемая клиентам,
 * соответствует заданному контракту. Обеспечивается взаимодействие несовместимых интерфейсов, предоставляемых классами типа
 * Adaptee. Реализация, представленная выше, использует один класс типа Adaptee. В общем случае эти классы могут быть
 * организованы в иерархию и при инициализации объекта типа Adapter будет передаваться объект из иерархии, и скрытое
 * действие будет выполняться в соответствии с конкретным типа объекта. Но это уже будет не совсем шаблон Adapter
 */
public class RunnerAdapter {
    public static void main(String[] args) {
        Adapter target = new ConcreteAdapter(new Adaptee());
        Client client = new Client(target);
        client.execute(target);
    }
}
