package gof.designpatterns.structural.decorator.it;

/**
 * использование шаблона Decorator # RunnerDecorator.java
 * Создав экземпляр класса Employee, можно делегировать ему выполнение задач, связанных с разработчиком,
 * тестировщиком или team-лидером, без создания специализированных подклассов
 * <p>
 * В качестве примера можно рассмотреть систему управления заданиями в IТ-проекте. Система предназначена для визуализации
 * процесса выполнения отдельных частей проекта участниками с различными профессиональными навыками.
 * Проект выполняется сотрудниками, которые могут выполнять общие для всех действия по открытию задания для выполнения,
 * выставлению пометки о выполнении, «переоткрытию» задания в случае, например, нахождения ошибки тестировщиком.
 * Каждое из этих действий может иметь дополнительные особенности, зависящие от роли сотрудника в проекте.
 * Использование шаблона Decorator позволяет учесть эти особенности без построения дополнительной иерархии сотрудников.
 */
public class RunnerDecorator {
    public static void main(String[] args) {
        IEmployee employee = new TesterDecorator(new Employee("Ivanov"));
        employee.reopenTask();
        employee = new TeamLeadDecorator(new Employee("Petrov"));
        employee.openTask();
    }
}

